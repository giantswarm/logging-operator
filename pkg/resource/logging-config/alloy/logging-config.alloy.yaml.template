# This file was generated by logging-operator.
# It configures Alloy to be used as a logging agent.
# - configMap is generated from logging.alloy.template and passed as a string
#   here and will be created by Alloy's chart.
# - Alloy runs as a daemonset, with required tolerations in order to scrape logs
#   from every machine in the cluster.
# - Running as root user is required in order to be able to read log files within
#   /var/log/journal and /run/log/journal directories.
# - NODENAME env var is used as additional label for kubernetes_audit logs.
alloy:
  alloy:
    configMap:
      create: true
      content: |-
{{ .AlloyConfig | indent 8 }}
{{- if .SupportPodLogs }}
    clustering:
      enabled: true
      name: alloy-logs
{{- end }}
    extraEnv:
    - name: NODENAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    envFrom:
    - secretRef:
        name: {{ .SecretName }}
    mounts:
      varlog: true
      dockercontainers: true
      extra:
      - name: runlogjournal
        mountPath: /run/log/journal
        readOnly: true
      # This is needed to allow alloy to create files when using readOnlyRootFilesystem
      - name: alloy-tmp
        mountPath: /tmp/alloy
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      runAsUser: 0
      runAsGroup: 0
      runAsNonRoot: false
      seccompProfile:
        type: RuntimeDefault
  controller:
    type: daemonset
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
      operator: Exists
    - effect: NoSchedule
      key: node-role.kubernetes.io/control-plane
      operator: Exists
    volumes:
      extra:
      - name: runlogjournal
        hostPath:
          path: /run/log/journal
      - name: alloy-tmp
        emptyDir: {}
{{- if .SupportPodLogs }}
podLogs:
{{- if .IsWorkloadCluster }}
{{- if gt (len (.DefaultWorkloadClusterNamespaces | join ",")) 0 }}
- name: namespace-default
  namespace: kube-system
  spec:
    selector: {}
    namespaceSelector:
      matchExpressions:
      - key: kubernetes.io/metadata.name
        operator: In
        values:
        {{- range .DefaultWorkloadClusterNamespaces }}
        - {{ . }}
        {{- end }}
{{- end }}
- name: pod-selector
  namespace: kube-system
  spec:
    selector:
      matchLabels:
        {{ .LoggingLabel }}: "true"
    namespaceSelector:
      matchExpressions:
      - key: {{ .LoggingLabel }}
        operator: NotIn
        values:
        - "true"
      {{- if gt (len (.DefaultWorkloadClusterNamespaces | join ",")) 0 }}
      - key: kubernetes.io/metadata.name
        operator: NotIn
        values:
        {{- range .DefaultWorkloadClusterNamespaces }}
        - {{ . }}
        {{- end }}
      {{- end }}
- name: namespace-selector
  namespace: kube-system
  spec:
    selector:
      matchExpressions:
      - key: {{ .LoggingLabel }}
        operator: NotIn
        values:
        - "false"
    namespaceSelector:
      matchExpressions:
      - key: {{ .LoggingLabel }}
        operator: In
        values:
        - "true"
      {{- if gt (len (.DefaultWorkloadClusterNamespaces | join ",")) 0 }}
      - key: kubernetes.io/metadata.name
        operator: NotIn
        values:
        {{- range .DefaultWorkloadClusterNamespaces }}
        - {{ . }}
        {{- end }}
      {{- end }}
{{- else }}
- name: pod-selector
  namespace: kube-system
  spec:
    selector: {}
    namespaceSelector: {}
{{- end }}
{{- end }}
