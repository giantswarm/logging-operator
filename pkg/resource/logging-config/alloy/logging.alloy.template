{{- if .IsWorkloadCluster }}
// Read namespaces with logging enabled from file
local.file "namespaces" {
	filename = "/etc/alloy-namespaces/namespaces"
}

// Select all Pods from Namespaces with logging enabled
// Filter out Pods whith logging disabled
discovery.kubernetes "kubernetes_namespaces" {
	role = "pod"

	namespaces {
		names = concat(split(local.file.namespaces.content, ","), ["kube-system", "giantswarm"])
	}

	selectors {
		role = "pod"
		label = "{{ .LoggingLabel }}!=disabled"
	}
}

// Select Pods with logging enabled
discovery.kubernetes "kubernetes_pods" {
	role = "pod"

	selectors {
		role = "pod"
		label = "{{ .LoggingLabel }}=enabled"
	}
}

// Filter out Pods with logging enabled in Namespaces with logging enabled
// This is to avoid duplicated targets
discovery.relabel "kubernetes_pods" {
	targets = discovery.kubernetes.kubernetes_pods.targets

	rule {
		action = "drop"
		source_labels = ["__meta_kubernetes_namespace"]
		regex = join([replace(local.file.namespaces.content, ",", "|"), "kube-system", "giantswarm"], "|")
	}
}

discovery.relabel "kubernetes" {
	targets = concat(discovery.relabel.kubernetes_pods.output, discovery.kubernetes.kubernetes_namespaces.targets)
{{- else }}

// Select all pods on the management cluster
discovery.kubernetes "kubernetes_pods" {
	role = "pod"
}

discovery.relabel "kubernetes" {
	targets = discovery.kubernetes.kubernetes_pods.targets
{{- end }}

	rule {
		source_labels = ["__meta_kubernetes_pod_controller_name"]
		regex         = "([0-9a-z-.]+?)(-[0-9a-f]{8,10})?"
		target_label  = "__tmp_controller_name"
	}

	rule {
		source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name", "__meta_kubernetes_pod_label_app", "__tmp_controller_name", "__meta_kubernetes_pod_name"]
		regex         = "^;*([^;]+)(;.*)?$"
		target_label  = "app"
	}

	rule {
		source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_instance", "__meta_kubernetes_pod_label_instance"]
		regex         = "^;*([^;]+)(;.*)?$"
		target_label  = "instance"
	}

	rule {
		source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_component", "__meta_kubernetes_pod_label_component"]
		regex         = "^;*([^;]+)(;.*)?$"
		target_label  = "component"
	}

	rule {
		target_label = "scrape_job"
		replacement  = "kubernetes-pods"
	}

	rule {
		source_labels = ["__meta_kubernetes_pod_node_name"]
		target_label  = "node"
	}

	rule {
		source_labels = ["__meta_kubernetes_namespace"]
		target_label  = "namespace"
	}

	rule {
		source_labels = ["namespace", "app"]
		separator     = "/"
		target_label  = "job"
	}

	rule {
		source_labels = ["__meta_kubernetes_pod_name"]
		target_label  = "pod"
	}

	rule {
		source_labels = ["__meta_kubernetes_pod_container_name"]
		target_label  = "container"
	}

	rule {
		source_labels = ["__meta_kubernetes_pod_label_giantswarm_io_logging_tenant"]
		target_label  = "bob"
	}

	rule {
		source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
		separator     = "/"
		target_label  = "__path__"
		replacement   = "/var/log/pods/*$1/*.log"
	}

	rule {
		source_labels = ["__meta_kubernetes_pod_annotationpresent_kubernetes_io_config_hash", "__meta_kubernetes_pod_annotation_kubernetes_io_config_hash", "__meta_kubernetes_pod_container_name"]
		separator     = "/"
		regex         = "true/(.*)"
		target_label  = "__path__"
		replacement   = "/var/log/pods/*$1/*.log"
	}
}

local.file_match "kubernetes" {
	path_targets = discovery.relabel.kubernetes.output
}

loki.process "kubernetes" {
	forward_to = [loki.write.default.receiver]

	stage.cri { }

	stage.structured_metadata {
		values = {
			"filename" = "",
			"stream" = "",
		}
	}

	stage.label_drop {
		values = [
			"filename",
			"stream",
		]
	}
}

loki.source.file "kubernetes" {
	targets               = local.file_match.kubernetes.targets
	forward_to            = [loki.process.kubernetes.receiver]
	legacy_positions_file = "/run/promtail/positions.yaml"
}

loki.process "systemd_journal_run" {
	forward_to = [loki.write.default.receiver]

	stage.json {
		expressions = {
			SYSLOG_IDENTIFIER = "SYSLOG_IDENTIFIER",
		}
	}

	stage.drop {
		source = "SYSLOG_IDENTIFIER"
		value  = "audit"
	}
}

discovery.relabel "systemd_journal_run" {
	targets = []

	rule {
		source_labels = ["__journal__systemd_unit"]
		target_label  = "__tmp_systemd_unit"
	}

	rule {
		source_labels = ["__journal__systemd_unit", "__journal_syslog_identifier"]
		regex         = ";(.+)"
		target_label  = "__tmp_systemd_unit"
	}

	rule {
		source_labels = ["__tmp_systemd_unit"]
		target_label  = "systemd_unit"
	}

	rule {
		source_labels = ["__journal__hostname"]
		target_label  = "node"
	}
}

loki.source.journal "systemd_journal_run" {
	format_as_json = true
	max_age        = "12h0m0s"
	path           = "/run/log/journal"
	relabel_rules  = discovery.relabel.systemd_journal_run.rules
	forward_to     = [loki.process.systemd_journal_run.receiver]
	labels         = {
		scrape_job = "system-logs",
	}
}

loki.process "systemd_journal_var" {
	forward_to = [loki.write.default.receiver]

	stage.json {
		expressions = {
			SYSLOG_IDENTIFIER = "SYSLOG_IDENTIFIER",
		}
	}

	stage.drop {
		source = "SYSLOG_IDENTIFIER"
		value  = "audit"
	}
}

discovery.relabel "systemd_journal_var" {
	targets = []

	rule {
		source_labels = ["__journal__systemd_unit"]
		target_label  = "__tmp_systemd_unit"
	}

	rule {
		source_labels = ["__journal__systemd_unit", "__journal_syslog_identifier"]
		regex         = ";(.+)"
		target_label  = "__tmp_systemd_unit"
	}

	rule {
		source_labels = ["__tmp_systemd_unit"]
		target_label  = "systemd_unit"
	}

	rule {
		source_labels = ["__journal__hostname"]
		target_label  = "node"
	}
}

loki.source.journal "systemd_journal_var" {
	format_as_json = true
	max_age        = "12h0m0s"
	path           = "/var/log/journal"
	relabel_rules  = discovery.relabel.systemd_journal_var.rules
	forward_to     = [loki.process.systemd_journal_var.receiver]
	labels         = {
		scrape_job = "system-logs",
	}
}

local.file_match "kubernetes_audit" {
	path_targets = [{
		__address__ = "localhost",
		__path__    = "/var/log/apiserver/audit.log",
		node   = coalesce(env("NODENAME"), "unknown"),
		scrape_job  = "audit-logs",
	}]
}

loki.process "kubernetes_audit" {
	forward_to = [loki.write.default.receiver]

	stage.json {
		expressions = {
			objectRef = "objectRef",
		}
	}

	stage.json {
		expressions = {
			namespace = "namespace",
			resource  = "resource",
		}
		source = "objectRef"
	}

	stage.structured_metadata {
		values = {
			"resource" = "",
			"filename" = "",
		}
	}

	stage.label_drop {
		values = [
			"filename",
		]
	}

	stage.labels {
		values = {
			namespace = "",
		}
	}
}

loki.source.file "kubernetes_audit" {
	targets               = local.file_match.kubernetes_audit.targets
	forward_to            = [loki.process.kubernetes_audit.receiver]
	legacy_positions_file = "/run/promtail/positions.yaml"
}

loki.write "default" {
	endpoint {
		url                = env("{{ .LokiURLEnvVarName }}")
		max_backoff_period = "{{ .MaxBackoffPeriod }}"
		tenant_id          = env("{{ .TenantIDEnvVarName }}")

		basic_auth {
			username = env("{{ .BasicAuthUsernameEnvVarName }}")
			password = env("{{ .BasicAuthPasswordEnvVarName }}")
		}
	}
	external_labels = {
		cluster_id   = "{{ .ClusterID }}",
		installation = "{{ .Installation }}",
	}
}

logging {
  level  = "debug"
  format = "logfmt"
}
