# This file was generated by logging-operator.
# It configures Alloy to be used as events logger.
# - configMap is generated from events-logger.alloy.template and passed as a string
#   here and will be created by Alloy's chart.
# - Alloy runs as a deployment, with only 1 replica.
alloy:
  alloy:
    configMap:
      create: true
      content: |-
        logging {
        	level  = "info"
        	format = "logfmt"
        }
        remote.kubernetes.secret "credentials" {
        	namespace = "kube-system"
        	name = "alloy-events"
        }
        loki.source.kubernetes_events "local" {
        	namespaces = []
        	forward_to = [loki.write.default.receiver]
        }
        // Loki target configuration
        loki.write "default" {
        	endpoint {
        		url                = nonsensitive(remote.kubernetes.secret.credentials.data["logging-url"])
        		max_backoff_period = "10m0s"
        		remote_timeout     = "1m0s"
        		tenant_id          = nonsensitive(remote.kubernetes.secret.credentials.data["logging-tenant-id"])
        		basic_auth {
        			username = nonsensitive(remote.kubernetes.secret.credentials.data["logging-username"])
        			password = remote.kubernetes.secret.credentials.data["logging-password"]
        		}
        		tls_config {
        			insecure_skip_verify = false
        		}
        	}
        	external_labels = {
        		cluster_id       = "test-cluster",
        		cluster_type     = "workload_cluster",
        		customer         = "test-customer",
        		installation     = "test-installation",
        		organization     = "test-organization",
        		pipeline         = "test-pipeline",
        		provider         = "test-provider",
        		region           = "test-region",
        		scrape_job       = "kubernetes-events",
        	}
        }
        otelcol.auth.basic "tracing_credentials" {
        	username = nonsensitive(remote.kubernetes.secret.credentials.data["tracing-username"])
        	password = remote.kubernetes.secret.credentials.data["tracing-password"]
        }
        // OTLP receiver for traces
        otelcol.receiver.otlp "traces" {
        	grpc {
        		endpoint = "0.0.0.0:4317"
        	}
        	http {
        		endpoint = "0.0.0.0:4318"
        	}
        	output {
        		traces = [otelcol.processor.k8sattributes.default.input]
        	}
        }
        otelcol.processor.k8sattributes "default" {
        	extract {
        		metadata = [
        			"k8s.namespace.name",
        			"k8s.pod.name",
        			"k8s.container.name",
        		]
        		label {
        			key = "observability.giantswarm.io/tenant"
        			tag_name = "giantswarm.tenant"
        		}
        		otel_annotations = true
        	}
        	output {
        		traces = [otelcol.processor.resource.default.input]
        	}
        }
        otelcol.processor.resource "default" {
        	attributes {
        		upsert {
        			key = "giantswarm.cluster.id"
        			value = "test-cluster"
        		}
        		upsert {
        			key = "giantswarm.cluster.type"
        			value = "workload_cluster"
        		}
        		upsert {
        			key = "giantswarm.cluster.customer"
        			value = "test-customer"
        		}
        		upsert {
        			key = "giantswarm.cluster.installation"
        			value = "test-installation"
        		}
        		upsert {
        			key = "giantswarm.cluster.organization"
        			value = "test-organization"
        		}
        		upsert {
        			key = "giantswarm.cluster.pipeline"
        			value = "test-pipeline"
        		}
        		upsert {
        			key = "giantswarm.cluster.provider"
        			value = "test-provider"
        		}
        		upsert {
        			key = "giantswarm.cluster.region"
        			value = "test-region"
        		}
        	}
        	output {
        		traces = [
        			otelcol.processor.filter.giantswarm.input,
        		]
        	}
        }
        otelcol.processor.filter "giantswarm" {
        	traces {
        		span = [
        			`resource.attributes["giantswarm.tenant"] != "giantswarm"`,
        		]
        	}
        	output {
        		traces = [otelcol.processor.resource.cleanup_giantswarm.input]
        	}
        }
        // Remove giantswarm.tenant attribute after filtering
        otelcol.processor.resource "cleanup_giantswarm" {
        	attributes {
        		delete {
        			key = "giantswarm.tenant"
        		}
        	}
        	output {
        		traces = [otelcol.exporter.otlp.giantswarm.input]
        	}
        }
        // one OTLP gRPC exporter for traces per tenant
        otelcol.exporter.otlp "giantswarm" {
        	client {
        		endpoint = "<tempo-url>:443"
        		headers = {
        			"X-Scope-OrgID" = "giantswarm",
        		}
        		auth = otelcol.auth.basic.tracing_credentials.handler
        	}
        }
    # We decided to configure the alloy-events resources as such after some investigation done https://github.com/giantswarm/giantswarm/issues/32655
    resources:
      limits:
        cpu: 50m
        memory: 256Mi
      requests:
        cpu: 25m
        memory: 128Mi
    securityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: false
      runAsUser: 10
      runAsGroup: 10
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
  controller:
    type: deployment
    replicas: 1
  crds:
    create: false
  extraObjects:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        meta.helm.sh/release-name: alloy-events
        meta.helm.sh/release-namespace: kube-system
      labels:
        app.kubernetes.io/component: networking
        app.kubernetes.io/instance: alloy-events
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: alloy
        app.kubernetes.io/part-of: alloy
        application.giantswarm.io/team: atlas
        giantswarm.io/managed-by: alloy-events
        giantswarm.io/service-type: managed
        helm.sh/chart: alloy-1.1.0
      name: otlp-gateway
      namespace: kube-system
    spec:
      ports:
      - appProtocol: grpc
        name: otlp
        port: 4317
        protocol: TCP
        targetPort: 4317
      - appProtocol: http
        name: otlp-http
        port: 4318
        protocol: TCP
        targetPort: 4318
      selector:
        app.kubernetes.io/instance: alloy-events
        app.kubernetes.io/name: alloy
      type: ClusterIP

networkPolicy:
  cilium:
    ingress:
    - toPorts:
      - ports:
        # Alloy Control Plane
        - port: "12345"
          protocol: TCP
        # OTLP GRPC
        - port: "4317"
          protocol: "TCP"
        # OTLP HTTP
        - port: "4318"
          protocol: "TCP"

verticalPodAutoscaler:
  enabled: true
  # We decided to configure the alloy-events vertical pod autoscaler as such after some investigation done https://github.com/giantswarm/giantswarm/issues/32655
  resourcePolicy:
    containerPolicies:
    - containerName: alloy
      controlledResources:
      - memory
      controlledValues: "RequestsAndLimits"
