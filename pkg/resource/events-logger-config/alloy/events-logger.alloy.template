logging {
	level  = "info"
	format = "logfmt"
}

remote.kubernetes.secret "credentials" {
	namespace = "kube-system"
	name = "{{ .SecretName }}"
}

loki.source.kubernetes_events "local" {
	{{- if and .IsWorkloadCluster .IncludeNamespaces }}
	namespaces = ["{{ join "\", \"" .IncludeNamespaces }}"]
	{{- else }}
	namespaces = []
	{{- end }}

	{{- if and .IsWorkloadCluster .ExcludeNamespaces }}
	forward_to = [loki.process.default.receiver]
	{{- else }}
	forward_to = [loki.write.default.receiver]
	{{- end }}
}

{{- if and .IsWorkloadCluster .ExcludeNamespaces }}
// exclude configured namespaces
loki.process "default" {
	forward_to = [loki.write.default.receiver]

	stage.drop {
		source = "namespace"
		expression = {{ join "|" .ExcludeNamespaces | quote }}
	}
}
{{- end }}

// Loki target configuration
loki.write "default" {
	endpoint {
		url                = nonsensitive(remote.kubernetes.secret.credentials.data["{{ .LoggingURLKey }}"])
		max_backoff_period = "{{ .MaxBackoffPeriod }}"
		remote_timeout     = "{{ .RemoteTimeout }}"
		tenant_id          = nonsensitive(remote.kubernetes.secret.credentials.data["{{ .LoggingTenantIDKey }}"])

		basic_auth {
			username = nonsensitive(remote.kubernetes.secret.credentials.data["{{ .LoggingUsernameKey }}"])
			password = remote.kubernetes.secret.credentials.data["{{ .LoggingPasswordKey }}"]
		}

		tls_config {
			insecure_skip_verify = {{ .InsecureSkipVerify }}
		}
	}
	external_labels = {
		cluster_id   = "{{ .ClusterID }}",
		installation = "{{ .Installation }}",
		scrape_job = "kubernetes-events",
	}
}
