logging {
	level  = "info"
	format = "logfmt"
}

remote.kubernetes.secret "credentials" {
	namespace = "kube-system"
	name = "{{ .SecretName }}"
}

loki.source.kubernetes_events "local" {
	{{- if and .IsWorkloadCluster .IncludeNamespaces }}
	namespaces = ["{{ join "\", \"" .IncludeNamespaces }}"]
	{{- else }}
	namespaces = []
	{{- end }}

	{{- if and .IsWorkloadCluster .ExcludeNamespaces }}
	forward_to = [loki.process.default.receiver]
	{{- else }}
	forward_to = [loki.write.default.receiver]
	{{- end }}
}

{{- if and .IsWorkloadCluster .ExcludeNamespaces }}
// exclude configured namespaces
loki.process "default" {
	forward_to = [loki.write.default.receiver]

	stage.drop {
		source = "namespace"
		expression = {{ join "|" .ExcludeNamespaces | quote }}
	}
}
{{- end }}

// Loki target configuration
loki.write "default" {
	endpoint {
		url                = nonsensitive(remote.kubernetes.secret.credentials.data["{{ .LoggingURLKey }}"])
		max_backoff_period = "{{ .MaxBackoffPeriod }}"
		remote_timeout     = "{{ .RemoteTimeout }}"
		tenant_id          = nonsensitive(remote.kubernetes.secret.credentials.data["{{ .LoggingTenantIDKey }}"])

		basic_auth {
			username = nonsensitive(remote.kubernetes.secret.credentials.data["{{ .LoggingUsernameKey }}"])
			password = remote.kubernetes.secret.credentials.data["{{ .LoggingPasswordKey }}"]
		}

		tls_config {
			insecure_skip_verify = {{ .InsecureSkipVerify }}
		}
	}
	external_labels = {
		cluster_id   = "{{ .ClusterID }}",
		installation = "{{ .Installation }}",
		scrape_job = "kubernetes-events",
	}
}

{{- if .TracingEnabled }}
otelcol.auth.basic "tracing credentials" {
	username = nonsensitive(remote.kubernetes.secret.credentials.data["{{ .TracingUsernameKey }}"])
	password = remote.kubernetes.secret.credentials.data["{{ .TracingPasswordKey }}"]
}

// OTLP receiver for traces
otelcol.receiver.otlp "traces" {
	grpc {
		endpoint = "0.0.0.0:4317"
	}

	http {
		endpoint = "0.0.0.0:4318"
	}

	output {
		traces = [otelcol.processor.k8sattributes.default.input]
	}
}

otelcol.processor.k8sattributes "default" {
	extract {
		metadata = [
			"k8s.namespace.name",
			"k8s.pod.name",
			"k8s.container.name",
		]
		label {
			key = "observability.giantswarm.io/tenant"
			tag_name = "giantswarm.tenant"
		}
		otel_annotations = true
	}

	output {
		traces = [
			{{- range .Tenants }}
			otelcol.processor.filter.{{ . }}.input,
			{{- end }}
		]
	}
}

{{- range .Tenants }}
otelcol.processor.filter "{{ . }}" {
	traces {
		span = [
			`resource.attributes["giantswarm.tenant"] != "{{ . }}"`,
		]
	}
	output {
		traces = [otelcol.exporter.otlphttp.{{ . }}.input]
	}
}

// one OTLP HTTP exporter for traces per tenant
otelcol.exporter.otlphttp "{{ . }}" {
	client {
		// TODO Try out /opentelemetry with grpc and not http
		endpoint = "https://{{ $.TracingEndpoint }}"
		headers = {
			"X-Scope-OrgID" = "{{ . }}",
		}
		auth = otelcol.auth.basic.tracing_credentials.handler
	}
}
{{- end }}
{{- end }}
